import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { 
  Skull, 
  Flame, 
  Moon, 
  Zap, 
  Heart, 
  Eye, 
  Star,
  Coffee,
  Car,
  Smartphone,
  Clock,
  Wifi,
  Upload,
  Camera,
  Volume2,
  Trophy,
  Target
} from 'lucide-react';
import heroImage from '@/assets/hero-mystical.jpg';
import voodooDoll from '@/assets/voodoo-doll.jpg';

type AppStep = 'home' | 'target' | 'doll' | 'ritual' | 'result';

interface TargetData {
  name: string;
  relation: string;
  photo?: string;
}

interface DollData {
  avatar: string;
  outfit: string;
  nameTag: string;
  facePhoto?: string;
}

interface RitualAction {
  id: string;
  name: string;
  icon: React.ReactNode;
  performed: boolean;
  sound?: string;
  points: number;
}

const KalaJaadooApp = () => {
  const [currentStep, setCurrentStep] = useState<AppStep>('home');
  const [targetData, setTargetData] = useState<TargetData>({ name: '', relation: '' });
  const [dollData, setDollData] = useState<DollData>({ avatar: '', outfit: '', nameTag: '' });
  const [selectedCurse, setSelectedCurse] = useState('');
  const [totalScore, setTotalScore] = useState(0);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const photoInputRef = useRef<HTMLInputElement>(null);
  
  const [ritualActions, setRitualActions] = useState<RitualAction[]>([
    { 
      id: 'pins', 
      name: '‡§∏‡•Å‡§à ‡§ö‡•Å‡§≠‡§æ‡§®‡§æ', 
      icon: <Zap className="w-5 h-5" />, 
      performed: false,
      sound: 'cry',
      points: 20
    },
    { 
      id: 'lemon', 
      name: '‡§®‡•Ä‡§Ç‡§¨‡•Ç-‡§Æ‡§ø‡§∞‡•ç‡§ö‡•Ä ‡§°‡§æ‡§≤‡§®‡§æ', 
      icon: <Flame className="w-5 h-5" />, 
      performed: false,
      sound: 'fire',
      points: 15
    },
    { 
      id: 'yantra', 
      name: '‡§Ø‡§Ç‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§®‡§æ', 
      icon: <Star className="w-5 h-5" />, 
      performed: false,
      sound: 'mystical',
      points: 25
    },
    { 
      id: 'spin', 
      name: '‡§∏‡§ø‡§∞ ‡§ò‡•Å‡§Æ‡§æ‡§®‡§æ', 
      icon: <Moon className="w-5 h-5" />, 
      performed: false,
      sound: 'whoosh',
      points: 10
    },
    { 
      id: 'crows', 
      name: '‡§ï‡•å‡§µ‡•á ‡§õ‡•ã‡§°‡§º‡§®‡§æ', 
      icon: <Eye className="w-5 h-5" />, 
      performed: false,
      sound: 'crow',
      points: 30
    },
  ]);

  // More Indian curses
  const curses = [
    '‡§π‡§∞ ‡§∞‡•ã‡§ú ‡§ë‡§ü‡•ã ‡§µ‡§æ‡§≤‡§æ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡•à‡§∏‡•á ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§ó‡§æ üõ∫',
    '‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ AC ‡§ñ‡§∞‡§æ‡§¨ ‡§π‡•ã‡§ó‡§æ üå°Ô∏è',
    '‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§π‡§∞ ‡§õ‡§æ‡§§‡§æ ‡§ü‡•Ç‡§ü‡•á‡§ó‡§æ ‚òÇÔ∏è',
    '‡§π‡§∞ ‡§¶‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§Æ‡§ï ‡§ï‡§Æ ‡§π‡•ã‡§ó‡§æ üçõ',
    '‡§∏‡§¨‡•ç‡§ú‡•Ä ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Æ‡§π‡§Ç‡§ó‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä ü•¨',
    '‡§ü‡•ç‡§∞‡•á‡§® ‡§π‡§Æ‡•á‡§∂‡§æ ‡§≤‡•á‡§ü ‡§π‡•ã‡§ó‡•Ä üöÇ',
    '‡§π‡§∞ ‡§™‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ö‡•Ç‡§®‡§æ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§π‡•ã‡§ó‡§æ üåø',
    '‡§ó‡§≤‡§ø‡§Ø‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ï‡•Å‡§§‡•ç‡§§‡§æ ‡§≠‡•å‡§ï‡•á‡§ó‡§æ üêï',
    '‡§π‡§∞ ‡§ö‡§æ‡§Ø‡§µ‡§æ‡§≤‡§æ ‡§¨‡§æ‡§∏‡•Ä ‡§ö‡§æ‡§Ø ‡§¶‡•á‡§ó‡§æ ‚òï',
    '‡§∏‡§ø‡§®‡•á‡§Æ‡§æ ‡§π‡•â‡§≤ ‡§Æ‡•á‡§Ç ‡§Ü‡§ó‡•á ‡§≤‡§Ç‡§¨‡§æ ‡§Ü‡§¶‡§Æ‡•Ä ‡§¨‡•à‡§†‡•á‡§ó‡§æ üé¨',
    '‡§Æ‡§æ‡§Å ‡§π‡§Æ‡•á‡§∂‡§æ ‡§™‡§°‡§º‡•ã‡§∏‡•Ä ‡§∏‡•á ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§ó‡•Ä üë©‚Äçüë¶',
    '‡§µ‡§æ‡§à-‡§´‡§æ‡§à ‡§π‡§Æ‡•á‡§∂‡§æ "connecting" ‡§¶‡§ø‡§ñ‡§æ‡§è‡§ó‡§æ üì∂'
  ];

  const relations = [
    '‡§¶‡•ã‡§∏‡•ç‡§§', '‡§¨‡•â‡§∏', '‡§è‡§ï‡•ç‡§∏', '‡§≠‡§æ‡§à/‡§¨‡§π‡§®', '‡§™‡§°‡§º‡•ã‡§∏‡•Ä', '‡§∏‡§π‡§ï‡§∞‡•ç‡§Æ‡•Ä', '‡§ü‡•Ä‡§ö‡§∞', '‡§∞‡§ø‡§∂‡•ç‡§§‡•á‡§¶‡§æ‡§∞', '‡§∏‡§æ‡§≤‡§æ', '‡§∏‡§∏‡•Å‡§∞'
  ];

  // Sound effects simulation
  const playSound = (soundType: string) => {
    if (!soundEnabled) return;
    
    // Create audio context for sound effects
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    
    switch (soundType) {
      case 'cry':
        // Simulate cry sound with oscillator
        const cryOscillator = audioContext.createOscillator();
        const cryGain = audioContext.createGain();
        cryOscillator.connect(cryGain);
        cryGain.connect(audioContext.destination);
        cryOscillator.frequency.setValueAtTime(200, audioContext.currentTime);
        cryOscillator.frequency.exponentialRampToValueAtTime(150, audioContext.currentTime + 0.5);
        cryGain.gain.setValueAtTime(0.3, audioContext.currentTime);
        cryGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
        cryOscillator.start();
        cryOscillator.stop(audioContext.currentTime + 0.5);
        break;
      case 'fire':
        // Simulate fire crackling
        const fireOscillator = audioContext.createOscillator();
        const fireGain = audioContext.createGain();
        fireOscillator.connect(fireGain);
        fireGain.connect(audioContext.destination);
        fireOscillator.frequency.setValueAtTime(400, audioContext.currentTime);
        fireOscillator.type = 'sawtooth';
        fireGain.gain.setValueAtTime(0.2, audioContext.currentTime);
        fireGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
        fireOscillator.start();
        fireOscillator.stop(audioContext.currentTime + 0.3);
        break;
      default:
        console.log(`Playing ${soundType} sound effect`);
    }
  };

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const photoUrl = e.target?.result as string;
        setTargetData(prev => ({ ...prev, photo: photoUrl }));
        setDollData(prev => ({ ...prev, facePhoto: photoUrl }));
      };
      reader.readAsDataURL(file);
    }
  };

  const performRitualAction = (actionId: string) => {
    const action = ritualActions.find(a => a.id === actionId);
    if (action && !action.performed) {
      // Play sound effect
      if (action.sound) {
        playSound(action.sound);
      }
      
      // Add points
      setTotalScore(prev => prev + action.points);
      
      // Mark as performed
      setRitualActions(prev => 
        prev.map(a => 
          a.id === actionId 
            ? { ...a, performed: true }
            : a
        )
      );
    }
  };

  const resetApp = () => {
    setCurrentStep('home');
    setTargetData({ name: '', relation: '' });
    setDollData({ avatar: '', outfit: '', nameTag: '' });
    setSelectedCurse('');
    setTotalScore(0);
    setRitualActions(prev => prev.map(action => ({ ...action, performed: false })));
  };

  const renderHome = () => (
    <div className="min-h-screen flex flex-col items-center justify-center p-6 relative overflow-hidden">
      <div 
        className="absolute inset-0 bg-cover bg-center opacity-20"
        style={{ backgroundImage: `url(${heroImage})` }}
      />
      <div className="relative z-10 text-center max-w-4xl mx-auto">
        <div className="floating-animation mb-8">
          <Skull className="w-20 h-20 mx-auto text-fire mb-4" />
        </div>
        
        <h1 className="text-6xl font-bold mb-6 spooky-text bg-gradient-to-r from-fire to-candle bg-clip-text text-transparent">
          ‡§ï‡§æ‡§≤‡§æ ‡§ú‡§æ‡§¶‡•Ç ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§ü‡§∞
        </h1>
        
        <p className="text-xl mb-8 text-muted-foreground max-w-2xl mx-auto">
          ‡§Æ‡§ú‡§º‡§æ‡§ï‡§ø‡§Ø‡§æ ‡§§‡§Ç‡§§‡•ç‡§∞-‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§î‡§∞ ‡§®‡§ï‡§≤‡•Ä ‡§ú‡§æ‡§¶‡•Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§°‡§∞‡§æ‡§è‡§Ç! 
          ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
        </p>

        <div className="grid md:grid-cols-3 gap-6 mb-12">
          <Card className="mystical-card p-6">
            <Heart className="w-12 h-12 text-blood mb-4 mx-auto" />
            <h3 className="text-lg font-bold mb-2">‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ö‡•Å‡§®‡•á‡§Ç</h3>
            <p className="text-sm text-muted-foreground">‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§ö‡•Å‡§®‡•á‡§Ç</p>
          </Card>
          
          <Card className="mystical-card p-6">
            <Star className="w-12 h-12 text-candle mb-4 mx-auto" />
            <h3 className="text-lg font-bold mb-2">‡§ó‡•Å‡§°‡§º‡§ø‡§Ø‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç</h3>
            <p className="text-sm text-muted-foreground">‡§Ö‡§™‡§®‡•Ä ‡§µ‡•Ç‡§°‡•Ç ‡§°‡•â‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç</p>
          </Card>
          
          <Card className="mystical-card p-6">
            <Flame className="w-12 h-12 text-fire mb-4 mx-auto pulse-glow" />
            <h3 className="text-lg font-bold mb-2">‡§ú‡§æ‡§¶‡•Ç ‡§ï‡§∞‡•á‡§Ç</h3>
            <p className="text-sm text-muted-foreground">‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§§‡§Ç‡§§‡•ç‡§∞-‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ï‡§∞‡•á‡§Ç</p>
          </Card>
        </div>

        <Button 
          onClick={() => setCurrentStep('target')} 
          size="lg" 
          variant="mystical"
          className="text-xl px-8 py-4"
        >
          ‡§ú‡§æ‡§¶‡•Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç üîÆ
        </Button>

        <div className="mt-12 p-4 mystical-card rounded-lg">
          <p className="text-sm text-muted-foreground italic">
            ‚ö†Ô∏è <strong>‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£:</strong> ‡§Ø‡§π ‡§ê‡§™ ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§ 
            ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ú‡§æ‡§¶‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ‡•§ ‡§ú‡§æ‡§¶‡•Ç ‡§∏‡•á ‡§Ø‡§æ‡§¶ ‡§Ü‡§Ø‡§æ, ‡§Ü‡§™‡§®‡•á ‡§Ü‡§ú ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§Ø‡§æ ‡§π‡•à ‡§®‡§æ? üíß
          </p>
        </div>
      </div>
    </div>
  );

  const renderTargetForm = () => (
    <div className="min-h-screen flex items-center justify-center p-6">
      <Card className="mystical-card p-8 max-w-md w-full">
        <div className="text-center mb-6">
          <Target className="w-16 h-16 mx-auto text-blood mb-4 floating-animation" />
          <h2 className="text-3xl font-bold spooky-text">‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h2>
          <p className="text-muted-foreground mt-2">‡§ï‡§ø‡§∏ ‡§™‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‡§ú‡§æ‡§¶‡•Ç?</p>
        </div>

        <div className="space-y-4">
          <div>
            <Label htmlFor="name">‡§®‡§æ‡§Æ *</Label>
            <Input
              id="name"
              value={targetData.name}
              onChange={(e) => setTargetData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§°‡§æ‡§≤‡•á‡§Ç..."
              className="mt-1"
            />
          </div>

          <div>
            <Label htmlFor="relation">‡§∞‡§ø‡§∂‡•ç‡§§‡§æ</Label>
            <Select
              value={targetData.relation}
              onValueChange={(value) => setTargetData(prev => ({ ...prev, relation: value }))}
            >
              <SelectTrigger className="mt-1">
                <SelectValue placeholder="‡§∞‡§ø‡§∂‡•ç‡§§‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç..." />
              </SelectTrigger>
              <SelectContent>
                {relations.map((relation) => (
                  <SelectItem key={relation} value={relation}>
                    {relation}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Photo Upload */}
          <div>
            <Label>‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)</Label>
            <div className="mt-2">
              <input
                ref={photoInputRef}
                type="file"
                accept="image/*"
                onChange={handlePhotoUpload}
                className="hidden"
              />
              <Button
                type="button"
                variant="outline"
                onClick={() => photoInputRef.current?.click()}
                className="w-full"
              >
                <Camera className="w-4 h-4 mr-2" />
                {targetData.photo ? '‡§´‡•ã‡§ü‡•ã ‡§¨‡§¶‡§≤‡•á‡§Ç' : '‡§´‡•ã‡§ü‡•ã ‡§ö‡•Å‡§®‡•á‡§Ç'}
              </Button>
              {targetData.photo && (
                <div className="mt-3 text-center">
                  <img
                    src={targetData.photo}
                    alt="Target"
                    className="w-20 h-20 rounded-full mx-auto object-cover border-2 border-fire"
                  />
                  <p className="text-sm text-muted-foreground mt-1">
                    ‡§Ø‡§π ‡§ö‡•á‡§π‡§∞‡§æ ‡§ó‡•Å‡§°‡§º‡§ø‡§Ø‡§æ ‡§™‡§∞ ‡§≤‡§ó‡•á‡§ó‡§æ üòà
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Sound Toggle */}
          <div className="flex items-center justify-between pt-2">
            <Label>‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç</Label>
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => setSoundEnabled(!soundEnabled)}
              className={soundEnabled ? 'text-fire' : 'text-muted-foreground'}
            >
              <Volume2 className="w-4 h-4" />
            </Button>
          </div>

          <div className="flex gap-3 pt-4">
            <Button 
              variant="outline" 
              onClick={() => setCurrentStep('home')}
              className="flex-1"
            >
              ‡§µ‡§æ‡§™‡§∏
            </Button>
            <Button 
              variant="mystical" 
              onClick={() => setCurrentStep('doll')}
              disabled={!targetData.name}
              className="flex-1"
            >
              ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç
            </Button>
          </div>
        </div>

        {targetData.name.toLowerCase() === 'myself' || targetData.name.toLowerCase() === '‡§ñ‡•Å‡§¶' && (
          <div className="mt-6 p-4 bg-accent/20 rounded-lg border border-blood/50">
            <p className="text-center text-blood font-bold">
              ü™û ‡§ï‡§æ‡§≤‡§æ ‡§ú‡§æ‡§¶‡•Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§µ‡§æ‡§™‡§∏ ‡§Ü‡§§‡§æ ‡§π‡•à... ‡§Ö‡§™‡§®‡§æ ‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§°‡§æ‡§≤‡§æ ‡§π‡•à? üòà
            </p>
          </div>
        )}
      </Card>
    </div>
  );

  const renderDollCreation = () => (
    <div className="min-h-screen flex items-center justify-center p-6">
      <Card className="mystical-card p-8 max-w-2xl w-full">
        <div className="text-center mb-6">
          <Star className="w-16 h-16 mx-auto text-candle mb-4 pulse-glow" />
          <h2 className="text-3xl font-bold spooky-text">‡§ó‡•Å‡§°‡§º‡§ø‡§Ø‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç</h2>
          <p className="text-muted-foreground mt-2">{targetData.name} ‡§ï‡•Ä ‡§µ‡•Ç‡§°‡•Ç ‡§°‡•â‡§≤ ‡§¨‡§®‡§æ‡§è‡§Ç</p>
        </div>

        <div className="grid md:grid-cols-2 gap-8">
          <div className="space-y-4">
            <div>
              <Label>‡§ó‡•Å‡§°‡§º‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§Ö‡§µ‡§§‡§æ‡§∞</Label>
              <div className="grid grid-cols-2 gap-3 mt-2">
                {[1, 2, 3, 4].map((num) => (
                  <div
                    key={num}
                    className={`relative cursor-pointer rounded-lg border-2 transition-all ${
                      dollData.avatar === `avatar-${num}` 
                        ? 'border-fire shadow-spooky' 
                        : 'border-border hover:border-fire/50'
                    }`}
                    onClick={() => setDollData(prev => ({ ...prev, avatar: `avatar-${num}` }))}
                  >
                    <img 
                      src={voodooDoll} 
                      alt={`Avatar ${num}`}
                      className="w-full h-24 object-cover rounded-lg opacity-80"
                    />
                    <div className="absolute inset-0 flex items-center justify-center">
                      <span className="text-2xl">ü™Ü</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label htmlFor="outfit">‡§™‡•ã‡§∂‡§æ‡§ï</Label>
              <Select
                value={dollData.outfit}
                onValueChange={(value) => setDollData(prev => ({ ...prev, outfit: value }))}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue placeholder="‡§™‡•ã‡§∂‡§æ‡§ï ‡§ö‡•Å‡§®‡•á‡§Ç..." />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="kurta">‡§ï‡•Å‡§∞‡•ç‡§§‡§æ üëî</SelectItem>
                  <SelectItem value="saree">‡§∏‡§æ‡§°‡§º‡•Ä ü•ª</SelectItem>
                  <SelectItem value="suit">‡§∏‡•Ç‡§ü ü§µ</SelectItem>
                  <SelectItem value="dhoti">‡§ß‡•ã‡§§‡•Ä üï¥Ô∏è</SelectItem>
                  <SelectItem value="monster">‡§∞‡§æ‡§ï‡•ç‡§∑‡§∏ üëπ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="nameTag">‡§®‡§æ‡§Æ ‡§ü‡•à‡§ó</Label>
              <Input
                id="nameTag"
                value={dollData.nameTag}
                onChange={(e) => setDollData(prev => ({ ...prev, nameTag: e.target.value }))}
                placeholder={`${targetData.name} Monster`}
                className="mt-1"
              />
            </div>
          </div>

          <div className="flex flex-col items-center justify-center">
            <div className="relative">
              <img 
                src={voodooDoll} 
                alt="Voodoo Doll"
                className="w-48 h-48 object-cover rounded-lg shadow-mystical floating-animation"
              />
              
              {/* Display uploaded photo as doll face */}
              {dollData.facePhoto && (
                <div className="absolute top-8 left-1/2 transform -translate-x-1/2">
                  <img
                    src={dollData.facePhoto}
                    alt="Doll Face"
                    className="w-16 h-16 rounded-full object-cover border-2 border-fire shadow-glow"
                  />
                </div>
              )}
              
              <Badge className="absolute -top-2 -right-2 bg-fire text-primary-foreground">
                {dollData.nameTag || targetData.name}
              </Badge>
            </div>
            <p className="text-center mt-4 text-muted-foreground">
              ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§¶‡•Å‡§à ‡§ó‡•Å‡§°‡§º‡§ø‡§Ø‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à... ü™Ñ
            </p>
            {dollData.facePhoto && (
              <p className="text-center mt-2 text-fire text-sm font-bold">
                ‡§ö‡•á‡§π‡§∞‡§æ ‡§≤‡§ó ‡§ó‡§Ø‡§æ! ‡§Ö‡§¨ ‡§ú‡§æ‡§¶‡•Ç ‡§î‡§∞ ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§π‡•ã‡§ó‡§æ! üòà
              </p>
            )}
          </div>
        </div>

        <div className="flex gap-3 pt-6">
          <Button 
            variant="outline" 
            onClick={() => setCurrentStep('target')}
            className="flex-1"
          >
            ‡§µ‡§æ‡§™‡§∏
          </Button>
          <Button 
            variant="mystical" 
            onClick={() => setCurrentStep('ritual')}
            disabled={!dollData.avatar}
            className="flex-1"
          >
            ‡§ú‡§æ‡§¶‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ö‡§≤‡•á‡§Ç
          </Button>
        </div>
      </Card>
    </div>
  );

  const renderRitual = () => (
    <div className="min-h-screen p-6">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <Flame className="w-20 h-20 mx-auto text-fire mb-4 pulse-glow" />
          <h2 className="text-4xl font-bold spooky-text">‡§ï‡§æ‡§≤‡§æ ‡§ú‡§æ‡§¶‡•Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç</h2>
          <p className="text-muted-foreground mt-2">
            {targetData.name} ‡§™‡§∞ ‡§§‡§Ç‡§§‡•ç‡§∞-‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§Ü ‡§ó‡§Ø‡§æ ‡§π‡•à! üòà
          </p>
          
          {/* Score Display */}
          <div className="mt-4 flex justify-center">
            <Badge className="bg-fire text-primary-foreground text-lg px-4 py-2">
              <Trophy className="w-5 h-5 mr-2" />
              ‡§∏‡•ç‡§ï‡•ã‡§∞: {totalScore}
            </Badge>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Ritual Actions */}
          <div className="lg:col-span-1">
            <Card className="mystical-card p-6">
              <h3 className="text-xl font-bold mb-4 text-fire">‡§§‡§Ç‡§§‡•ç‡§∞-‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç</h3>
              <div className="space-y-3">
                {ritualActions.map((action) => (
                  <Button
                    key={action.id}
                    variant={action.performed ? "spooky" : "outline"}
                    onClick={() => performRitualAction(action.id)}
                    disabled={action.performed}
                    className="w-full justify-start relative"
                  >
                    {action.icon}
                    <span className="ml-2">{action.name}</span>
                    <span className="ml-auto text-xs text-candle">
                      {action.performed ? '‚úÖ' : `+${action.points}`}
                    </span>
                  </Button>
                ))}
              </div>
            </Card>

            <Card className="mystical-card p-6 mt-6">
              <h3 className="text-xl font-bold mb-4 text-blood">‡§∂‡•ç‡§∞‡§æ‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç</h3>
              <div className="space-y-2">
                {curses.map((curse, index) => (
                  <div
                    key={index}
                    className={`p-3 rounded-lg border cursor-pointer transition-all ${
                      selectedCurse === curse 
                        ? 'border-blood bg-accent/20' 
                        : 'border-border hover:border-blood/50'
                    }`}
                    onClick={() => setSelectedCurse(curse)}
                  >
                    <span className="text-sm">{curse}</span>
                  </div>
                ))}
              </div>
            </Card>
          </div>

          {/* Doll Display */}
          <div className="lg:col-span-2">
            <Card className="mystical-card p-8 text-center">
              <h3 className="text-2xl font-bold mb-6 text-candle">‡§ú‡§æ‡§¶‡•Å‡§à ‡§ó‡•Å‡§°‡§º‡§ø‡§Ø‡§æ</h3>
              
              <div className="relative inline-block">
                <img 
                  src={voodooDoll} 
                  alt="Target Doll"
                  className={`w-64 h-64 object-cover rounded-lg shadow-spooky mx-auto ${
                    ritualActions.some(a => a.performed) ? 'shake' : 'floating-animation'
                  }`}
                />
                
                {/* Display uploaded photo as doll face */}
                {dollData.facePhoto && (
                  <div className="absolute top-12 left-1/2 transform -translate-x-1/2">
                    <img
                      src={dollData.facePhoto}
                      alt="Doll Face"
                      className="w-20 h-20 rounded-full object-cover border-2 border-fire shadow-glow"
                    />
                  </div>
                )}
                
                <Badge className="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-fire text-primary-foreground text-lg">
                  {dollData.nameTag || targetData.name}
                </Badge>

                {/* Visual effects for performed actions */}
                {ritualActions.find(a => a.id === 'pins' && a.performed) && (
                  <div className="absolute top-8 right-8 text-2xl animate-pulse">üìå</div>
                )}
                {ritualActions.find(a => a.id === 'lemon' && a.performed) && (
                  <div className="absolute bottom-8 left-8 text-2xl animate-bounce">üå∂Ô∏è</div>
                )}
                {ritualActions.find(a => a.id === 'yantra' && a.performed) && (
                  <div className="absolute inset-0 border-4 border-candle rounded-full animate-spin"></div>
                )}
              </div>

              <div className="mt-8">
                <p className="text-lg mb-4">
                  {ritualActions.filter(a => a.performed).length}/5 ‡§§‡§Ç‡§§‡•ç‡§∞ ‡§™‡•Ç‡§∞‡•á ‡§π‡•Å‡§è
                </p>
                
                {selectedCurse && (
                  <div className="p-4 bg-blood/20 rounded-lg border border-blood/50 mb-6">
                    <p className="text-blood font-bold">‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ ‡§∂‡•ç‡§∞‡§æ‡§™:</p>
                    <p className="text-lg mt-2">{selectedCurse}</p>
                  </div>
                )}

                <div className="flex gap-3">
                  <Button 
                    variant="outline" 
                    onClick={() => setCurrentStep('doll')}
                    className="flex-1"
                  >
                    ‡§µ‡§æ‡§™‡§∏
                  </Button>
                  <Button 
                    variant="ritual" 
                    onClick={() => setCurrentStep('result')}
                    disabled={ritualActions.filter(a => a.performed).length < 3 || !selectedCurse}
                    className="flex-1"
                  >
                    ‡§ú‡§æ‡§¶‡•Ç ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç üî•
                  </Button>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );

  const renderResult = () => (
    <div className="min-h-screen flex items-center justify-center p-6">
      <Card className="mystical-card p-8 max-w-2xl w-full text-center">
        <div className="mb-8">
          <div className="relative inline-block">
            <Star className="w-24 h-24 mx-auto text-candle mb-4 pulse-glow" />
            <div className="absolute inset-0 animate-spin">
              <Flame className="w-6 h-6 text-fire" />
            </div>
          </div>
          <h2 className="text-4xl font-bold spooky-text mb-4">‡§ú‡§æ‡§¶‡•Ç ‡§∏‡§´‡§≤! üéâ</h2>
          <p className="text-xl text-muted-foreground">
            {targetData.name} ‡§™‡§∞ ‡§ï‡§æ‡§≤‡§æ ‡§ú‡§æ‡§¶‡•Ç ‡§™‡•Ç‡§∞‡§æ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à!
          </p>
        </div>

        <div className="space-y-6">
          {/* Final Score Display */}
          <div className="mb-6">
            <Badge className="bg-fire text-primary-foreground text-xl px-6 py-3">
              <Trophy className="w-6 h-6 mr-2" />
              ‡§´‡§æ‡§á‡§®‡§≤ ‡§∏‡•ç‡§ï‡•ã‡§∞: {totalScore}
            </Badge>
          </div>

          <div className="p-6 bg-gradient-to-r from-purple-900/50 to-red-900/50 rounded-lg border border-fire/50">
            <h3 className="text-xl font-bold text-fire mb-3">‡§ú‡§æ‡§¶‡•Å‡§à ‡§∏‡§∞‡•ç‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§ü</h3>
            <div className="space-y-2 text-left">
              <p><strong>‡§ü‡§æ‡§∞‡§ó‡•á‡§ü:</strong> {targetData.name}</p>
              <p><strong>‡§∞‡§ø‡§∂‡•ç‡§§‡§æ:</strong> {targetData.relation}</p>
              <p><strong>‡§∂‡•ç‡§∞‡§æ‡§™:</strong> {selectedCurse}</p>
              <p><strong>‡§§‡§Ç‡§§‡•ç‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è:</strong> {ritualActions.filter(a => a.performed).length}/5</p>
              <p><strong>‡§ï‡•Å‡§≤ ‡§∏‡•ç‡§ï‡•ã‡§∞:</strong> {totalScore} ‡§Ö‡§Ç‡§ï</p>
              <p><strong>‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§∂‡•Ä‡§≤‡§§‡§æ:</strong> 100% ‡§Ö‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‚ú®</p>
            </div>
          </div>

          <Badge variant="outline" className="text-lg p-4 bg-candle/10 border-candle">
            üèÜ 100% ‡§®‡§ø‡§∑‡•ç‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§¨‡•à‡§ú
          </Badge>

          <div className="p-4 bg-muted/20 rounded-lg">
            <p className="text-sm text-muted-foreground italic">
              üì¢ <strong>‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç:</strong> ‡§Ø‡§π ‡§∏‡§¨ ‡§Æ‡§ú‡§º‡§æ‡§ï ‡§•‡§æ! ‡§ï‡•ã‡§à ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ú‡§æ‡§¶‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü ‡§π‡•à‡•§ 
              ‡§Ö‡§¨ ‡§ú‡§æ‡§ï‡§∞ {targetData.name} ‡§∏‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•Ä ‡§ï‡§∞ ‡§≤‡•á‡§Ç! üòÑ
            </p>
          </div>

          <div className="flex gap-3">
            <Button 
              variant="outline" 
              onClick={() => setCurrentStep('ritual')}
              className="flex-1"
            >
              ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç
            </Button>
            <Button 
              variant="mystical" 
              onClick={resetApp}
              className="flex-1"
            >
              ‡§®‡§Ø‡§æ ‡§ú‡§æ‡§¶‡•Ç ‡§ï‡§∞‡•á‡§Ç
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 'home': return renderHome();
      case 'target': return renderTargetForm();
      case 'doll': return renderDollCreation();
      case 'ritual': return renderRitual();
      case 'result': return renderResult();
      default: return renderHome();
    }
  };

  return <div className="min-h-screen bg-mystical">{renderCurrentStep()}</div>;
};

export default KalaJaadooApp;